import telebot
from telebot import types
import config
from config import *
from imp_funcs import *
from shared_functions import translate_to_user_language
import sqlite3
import json

# –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞ config.
bot = telebot.TeleBot(telegram_bot_token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
user_languages = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
choosed_lang = None

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ.
ids_messages = []

name = None

username, version, tokens, level = None, None, None, None

section = None

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_tables –∏–∑ imp_funcs.py, —Ä—è–¥ 289, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω—É–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
create_tables()


# –§—É–Ω–∫—Ü–∏—è add_user –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
def add_user(username, version):
    conn = sqlite3.connect('language_bot.db')
    c = conn.cursor()

    c.execute('''SELECT username, version, tokens, level FROM users WHERE username = ?''', (username,))
    existing_user = c.fetchone()
    if existing_user is None:
        try:
            c.execute('''INSERT INTO users (username, version) VALUES (?, ?)''', (username, version))
            conn.commit()
        except sqlite3.IntegrityError:
            pass
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.close()
        return existing_user

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è creat_inline_key_yes_no –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞: "–î–∞" –∏ "–ù–µ—Ç".
# –û–Ω–∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ ids_messages.
def creat_inline_key_yes_no(message, name_key, lang_code, call_yes, call_no, question):
    global ids_messages
    want_continue = question
    list_yes_no = [types.InlineKeyboardButton(translate_to_user_language('–¥–∞‚úÖ', lang_code),
                                              callback_data=call_yes),
                   types.InlineKeyboardButton(translate_to_user_language('–Ω–µ—Çüî¥', lang_code),
                                              callback_data=call_no)]
    name_key.add(*list_yes_no)
    mes = bot.send_message(message.chat.id, translate_to_user_language(want_continue, lang_code),
                            reply_markup=name_key, parse_mode='HTML').message_id

    # –ë–µ—Ä–µ–º –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    ids_messages.append(mes)


# –§—É–Ω–∫—Ü–∏—è get_keyboard_markup –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (inline keyboard markup)
# –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ "test.json".
# –≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
def get_keyboard_markup():
    with open('test.json', encoding='utf-8') as file:
        questions = json.load(file)['questions'][0]['answers']

    markup = telebot.types.InlineKeyboardMarkup()
    for answer in questions:
        button = telebot.types.InlineKeyboardButton(text=answer, callback_data=answer)
        markup.add(button)
    return markup


# –§—É–Ω–∫—Ü–∏—è show_menu –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.
def show_menu(message, keyboard, description):
    global ids_messages
    user_lang_code = user_languages.get(message.from_user.id)

    if not user_lang_code:
        pass
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫, –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ

        mes = bot.send_message(message.chat.id, translate_to_user_language(description, user_lang_code),
                               reply_markup=keyboard).message_id

        # –ë–µ—Ä–µ–º –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        ids_messages.append(mes)


# –§—É–Ω–∫—Ü–∏—è great_user –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–∫–ª—é—á–∞—è –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—é.
def great_user(message):
    global ids_messages
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mes1 = bot.send_message(message.chat.id, translate_to_user_language(config.great,
                            user_languages[message.from_user.id]), parse_mode='HTML').message_id

    mes = bot.send_animation(message.chat.id, animation_id).message_id

    # –ë–µ—Ä–µ–º –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    ids_messages.append(mes1)


# –§—É–Ω–∫—Ü–∏—è choose_lang –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è.
def choose_lang(message):
    global ids_messages
    mes = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                           reply_markup=get_language_keyboard()).message_id
    # –ë–µ—Ä–µ–º –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    ids_messages.append(mes)


# –§—É–Ω–∫—Ü–∏—è show_menu_key –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏.
def show_menu_key(message, language, markup):
    menu_markup = create_replay_keyboard(language, AVAILABLE_BUTTONS, BUTTONS_TRANSLATIONS)
    great_user(message)

    show_menu(message, menu_markup, '–≠—Ç–æ —Ç–≤–æ—è –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:')
    creat_inline_key_yes_no(message, markup, language, 'yes', 'no', f'<b>–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
@bot.message_handler(commands=['help', 'version', 'token', 'level'])
def list_commands(message):
    global version, username, tokens, level

    user_info = add_user(name, 'default')  # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é "default" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ

    try:
        username, version, tokens, level = user_info
    except TypeError:
        pass

    try:
        if message.text == '/help':
            bot.send_message(message.chat.id, config.list_commands, parse_mode='HTML')

        elif message.text == '/version':
            try:
                bot.send_message(message.chat.id, version)
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(message.chat.id, '/start')
        elif message.text == '/token':
            bot.send_message(message.chat.id, f'{tokens} Tokensü§ë')

        elif message.text == '/level':
            try:
                bot.send_message(message.chat.id, f'Level:{level}')
            except TypeError:
                bot.send_message(message.chat.id, 'level: None')

    except sqlite3.IntegrityError:
        bot.send_message(message.chat.id, '/start')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    global name, ids_messages, username, version, tokens, user_languages, level

    name = message.from_user.first_name
    user_info = add_user(name, 'default')  # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é "default" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ

    try:
        username, version, tokens, level = user_info
    except TypeError:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start
    if message.text == '/start':
        mes = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è:",
                               reply_markup=get_language_keyboard()).message_id

        # –ë–µ—Ä–µ–º –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        ids_messages.append(mes)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–¥–µ—Å—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@bot.message_handler(content_types=['text'])
def handle_message(message):
    global choosed_lang, ids_messages, name, username, version, tokens, section

    user_input = message.text.lower()
    user_lang_code = user_languages.get(message.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup2 = types.InlineKeyboardMarkup(row_width=2)

    if user_lang_code:
        if user_input in [lang_name.lower() for lang_name in AVAILABLE_LANGUAGES.values()]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ choosed_lang –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –º–µ–Ω—é.
            choosed_lang = user_lang_code
            show_menu_key(message, user_lang_code, markup)

    elif user_input in [lang_name.lower() for lang_name in AVAILABLE_LANGUAGES.values()]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫, –æ–±–Ω–æ–≤–∏—Ç–µ choosed_lang –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –º–µ–Ω—é.
        for lang_code, lang_name in AVAILABLE_LANGUAGES.items():
            if user_input == lang_name.lower() and user_input != '/start':
                user_languages[message.from_user.id] = lang_code
                user_lang_code = lang_code
                choosed_lang = user_lang_code

                show_menu_key(message, user_lang_code, markup)
                break

    if user_lang_code is None:
        return

    '''–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—ã–≤–∞—é—Ç message –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
    handle_deutsch(message, user_lang_code, regel_game, name)

    try:
        answer_version = translate_to_user_language(f'{username}, –í–∞—à–∞ –≤–µ—Ä—Å–∏—è:  ', choosed_lang) + version
        handle_menu_func(message, user_lang_code, answer_version, tokens, username)

    except TypeError:
        bot.send_message(message.chat.id, translate_to_user_language(f'{username}, –í–∞—à–∞ –≤–µ—Ä—Å–∏—è:  ',
                                                                     choosed_lang) + 'default')

    handle_return(message, user_lang_code, creat_inline_key_yes_no, AVAILABLE_BUTTONS, BUTTONS_TRANSLATIONS, markup2)

    handle_test(message, user_lang_code)

    # –û–±—Ä–∞–±—ã–≤–∞–µ–º messages –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—ã –∏ '–†–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ãüìÑ'
    if message.text == translate_to_user_language('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—ãü§ì', user_lang_code):
        print(version)
        section = 'information'
        if version == 'default':

            make_themes_key_standart(message, user_lang_code)
        elif version == 'vip':
            make_themes_key_vip(message, user_lang_code)

    elif message.text == translate_to_user_language('–†–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ãüìÑ', user_lang_code):
        section = 'worksheets'
        if version == 'default':

            make_work_sheets_standart(message, user_lang_code)
        elif version == 'vip':
            make_work_sheets_vip(message, user_lang_code)

    """–î–ª—è —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    #if message.text == '/get_tokens':
        #add_tokens(username, 1000)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ (callback) - —ç—Ç–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
@bot.callback_query_handler(func=lambda callback: True)
def callback_handler(callback):
    global ids_messages, choosed_lang, username, version, tokens, section, level

    if callback.data == 'yes':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message_id in ids_messages:
            try:
                bot.delete_message(callback.message.chat.id, message_id)
            except telebot.apihelper.ApiTelegramException as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏

                pass

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        ids_messages.clear()

        bot_func = create_replay_keyboard(choosed_lang, list_bot_function, list_bot_function2)
        bot_func.add(types.KeyboardButton(translate_to_user_language('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚óÄÔ∏è', choosed_lang)))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(callback.message.chat.id, translate_to_user_language('–¢–≤–æ–µ –º–µ–Ω—é-—Ñ—É–Ω–∫—Ü–∏–π:', choosed_lang),
                         reply_markup=bot_func)

    elif callback.data == 'no':
        bot.send_sticker(callback.message.chat.id, id_sticker_sad)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫-—Ç–µ–º –≤ –Ω–µ–º–µ—Ü–∫–æ–º
    open_information_or_worksheet(callback, version, names_themes_standart, names_sheets_standart,
                                  names_themes_vip, names_sheets_vip, section=section)
    try:

        make_lvl_key(callback, choosed_lang, level)

        send_random_game_words(callback, choosed_lang)

        send_first_test_task(callback)

        send_test(callback, choosed_lang, username)
    except AttributeError:
        pass


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()